# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lib.api import task_rpc_api_pb2 as lib_dot_api_dot_task__rpc__api__pb2
from lib.common import base_pb2 as lib_dot_common_dot_base__pb2


class TaskServiceStub(object):
    """## 任务 相关接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTaskDetailList = channel.unary_unary(
                '/rpcapi.TaskService/GetTaskDetailList',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.FromString,
                )
        self.GetTaskDetailListByTaskIds = channel.unary_unary(
                '/rpcapi.TaskService/GetTaskDetailListByTaskIds',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListByTaskIdsRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.FromString,
                )
        self.GetTaskEventList = channel.unary_unary(
                '/rpcapi.TaskService/GetTaskEventList',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.FromString,
                )
        self.GetTaskEventListByTaskIds = channel.unary_unary(
                '/rpcapi.TaskService/GetTaskEventListByTaskIds',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListByTaskIdsRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.FromString,
                )
        self.PublishTaskDeclare = channel.unary_unary(
                '/rpcapi.TaskService/PublishTaskDeclare',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareResponse.FromString,
                )
        self.TerminateTask = channel.unary_unary(
                '/rpcapi.TaskService/TerminateTask',
                request_serializer=lib_dot_api_dot_task__rpc__api__pb2.TerminateTaskRequest.SerializeToString,
                response_deserializer=lib_dot_common_dot_base__pb2.SimpleResponse.FromString,
                )


class TaskServiceServicer(object):
    """## 任务 相关接口
    """

    def GetTaskDetailList(self, request, context):
        """查看本组织参与过的全部任务详情列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskDetailListByTaskIds(self, request, context):
        """查看本组织参与过的全部任务详情列表 (v3.0)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskEventList(self, request, context):
        """查看某个任务的全部事件列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskEventListByTaskIds(self, request, context):
        """查看多个任务的全部事件列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishTaskDeclare(self, request, context):
        """发布任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateTask(self, request, context):
        """终止任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTaskDetailList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskDetailList,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListRequest.FromString,
                    response_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.SerializeToString,
            ),
            'GetTaskDetailListByTaskIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskDetailListByTaskIds,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListByTaskIdsRequest.FromString,
                    response_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.SerializeToString,
            ),
            'GetTaskEventList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskEventList,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListRequest.FromString,
                    response_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.SerializeToString,
            ),
            'GetTaskEventListByTaskIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskEventListByTaskIds,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListByTaskIdsRequest.FromString,
                    response_serializer=lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.SerializeToString,
            ),
            'PublishTaskDeclare': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishTaskDeclare,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareRequest.FromString,
                    response_serializer=lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareResponse.SerializeToString,
            ),
            'TerminateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateTask,
                    request_deserializer=lib_dot_api_dot_task__rpc__api__pb2.TerminateTaskRequest.FromString,
                    response_serializer=lib_dot_common_dot_base__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcapi.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """## 任务 相关接口
    """

    @staticmethod
    def GetTaskDetailList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/GetTaskDetailList',
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListRequest.SerializeToString,
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskDetailListByTaskIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/GetTaskDetailListByTaskIds',
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListByTaskIdsRequest.SerializeToString,
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskEventList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/GetTaskEventList',
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListRequest.SerializeToString,
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskEventListByTaskIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/GetTaskEventListByTaskIds',
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListByTaskIdsRequest.SerializeToString,
            lib_dot_api_dot_task__rpc__api__pb2.GetTaskEventListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishTaskDeclare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/PublishTaskDeclare',
            lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareRequest.SerializeToString,
            lib_dot_api_dot_task__rpc__api__pb2.PublishTaskDeclareResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.TaskService/TerminateTask',
            lib_dot_api_dot_task__rpc__api__pb2.TerminateTaskRequest.SerializeToString,
            lib_dot_common_dot_base__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
