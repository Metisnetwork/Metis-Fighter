# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from lib.api import power_rpc_api_pb2 as lib_dot_api_dot_power__rpc__api__pb2
from lib.common import base_pb2 as lib_dot_common_dot_base__pb2


class PowerServiceStub(object):
    """## 算力 相关接口
    /           【注意】 算力和元数据 不一样,
    查看外部组织时, 只需要知道外部组织的总算力, 而外部组织的元数据则需要知道单个单个的;
    查看自己组织时, 自己组织的算力和元数据都需要知道单个单个的.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGlobalPowerSummaryList = channel.unary_unary(
                '/rpcapi.PowerService/GetGlobalPowerSummaryList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerSummaryListResponse.FromString,
                )
        self.GetGlobalPowerDetailList = channel.unary_unary(
                '/rpcapi.PowerService/GetGlobalPowerDetailList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerDetailListResponse.FromString,
                )
        self.GetLocalPowerDetailList = channel.unary_unary(
                '/rpcapi.PowerService/GetLocalPowerDetailList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=lib_dot_api_dot_power__rpc__api__pb2.GetLocalPowerDetailListResponse.FromString,
                )
        self.PublishPower = channel.unary_unary(
                '/rpcapi.PowerService/PublishPower',
                request_serializer=lib_dot_api_dot_power__rpc__api__pb2.PublishPowerRequest.SerializeToString,
                response_deserializer=lib_dot_api_dot_power__rpc__api__pb2.PublishPowerResponse.FromString,
                )
        self.RevokePower = channel.unary_unary(
                '/rpcapi.PowerService/RevokePower',
                request_serializer=lib_dot_api_dot_power__rpc__api__pb2.RevokePowerRequest.SerializeToString,
                response_deserializer=lib_dot_common_dot_base__pb2.SimpleResponse.FromString,
                )


class PowerServiceServicer(object):
    """## 算力 相关接口
    /           【注意】 算力和元数据 不一样,
    查看外部组织时, 只需要知道外部组织的总算力, 而外部组织的元数据则需要知道单个单个的;
    查看自己组织时, 自己组织的算力和元数据都需要知道单个单个的.
    """

    def GetGlobalPowerSummaryList(self, request, context):
        """查看全网各个组织的总算力(累加)详情列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalPowerDetailList(self, request, context):
        """查看全网各个组织的各个算力详情列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLocalPowerDetailList(self, request, context):
        """本组织的所有(宿主机)算力信息列表 (包含【未发布】和【已发布】的)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishPower(self, request, context):
        """启用算力 (发布算力)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokePower(self, request, context):
        """停用算力 (撤销算力)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PowerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGlobalPowerSummaryList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalPowerSummaryList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerSummaryListResponse.SerializeToString,
            ),
            'GetGlobalPowerDetailList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalPowerDetailList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerDetailListResponse.SerializeToString,
            ),
            'GetLocalPowerDetailList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocalPowerDetailList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=lib_dot_api_dot_power__rpc__api__pb2.GetLocalPowerDetailListResponse.SerializeToString,
            ),
            'PublishPower': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishPower,
                    request_deserializer=lib_dot_api_dot_power__rpc__api__pb2.PublishPowerRequest.FromString,
                    response_serializer=lib_dot_api_dot_power__rpc__api__pb2.PublishPowerResponse.SerializeToString,
            ),
            'RevokePower': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokePower,
                    request_deserializer=lib_dot_api_dot_power__rpc__api__pb2.RevokePowerRequest.FromString,
                    response_serializer=lib_dot_common_dot_base__pb2.SimpleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcapi.PowerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PowerService(object):
    """## 算力 相关接口
    /           【注意】 算力和元数据 不一样,
    查看外部组织时, 只需要知道外部组织的总算力, 而外部组织的元数据则需要知道单个单个的;
    查看自己组织时, 自己组织的算力和元数据都需要知道单个单个的.
    """

    @staticmethod
    def GetGlobalPowerSummaryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.PowerService/GetGlobalPowerSummaryList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerSummaryListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGlobalPowerDetailList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.PowerService/GetGlobalPowerDetailList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            lib_dot_api_dot_power__rpc__api__pb2.GetGlobalPowerDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLocalPowerDetailList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.PowerService/GetLocalPowerDetailList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            lib_dot_api_dot_power__rpc__api__pb2.GetLocalPowerDetailListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.PowerService/PublishPower',
            lib_dot_api_dot_power__rpc__api__pb2.PublishPowerRequest.SerializeToString,
            lib_dot_api_dot_power__rpc__api__pb2.PublishPowerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokePower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcapi.PowerService/RevokePower',
            lib_dot_api_dot_power__rpc__api__pb2.RevokePowerRequest.SerializeToString,
            lib_dot_common_dot_base__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
