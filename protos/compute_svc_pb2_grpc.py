# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import compute_svc_pb2 as compute__svc__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ComputeProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatus = channel.unary_unary(
                '/computesvc.ComputeProvider/GetStatus',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=compute__svc__pb2.GetStatusReply.FromString,
                )
        self.GetTaskDetails = channel.unary_unary(
                '/computesvc.ComputeProvider/GetTaskDetails',
                request_serializer=compute__svc__pb2.GetTaskDetailsReq.SerializeToString,
                response_deserializer=compute__svc__pb2.GetTaskDetailsReply.FromString,
                )
        self.UploadShard = channel.stream_unary(
                '/computesvc.ComputeProvider/UploadShard',
                request_serializer=compute__svc__pb2.UploadShardReq.SerializeToString,
                response_deserializer=compute__svc__pb2.UploadShardReply.FromString,
                )
        self.HandleTaskReadyGo = channel.unary_unary(
                '/computesvc.ComputeProvider/HandleTaskReadyGo',
                request_serializer=common__pb2.TaskReadyGoReq.SerializeToString,
                response_deserializer=common__pb2.TaskReadyGoReply.FromString,
                )
        self.HandleCancelTask = channel.unary_unary(
                '/computesvc.ComputeProvider/HandleCancelTask',
                request_serializer=common__pb2.TaskCancelReq.SerializeToString,
                response_deserializer=common__pb2.TaskCancelReply.FromString,
                )


class ComputeProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadShard(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleTaskReadyGo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleCancelTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComputeProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=compute__svc__pb2.GetStatusReply.SerializeToString,
            ),
            'GetTaskDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskDetails,
                    request_deserializer=compute__svc__pb2.GetTaskDetailsReq.FromString,
                    response_serializer=compute__svc__pb2.GetTaskDetailsReply.SerializeToString,
            ),
            'UploadShard': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadShard,
                    request_deserializer=compute__svc__pb2.UploadShardReq.FromString,
                    response_serializer=compute__svc__pb2.UploadShardReply.SerializeToString,
            ),
            'HandleTaskReadyGo': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleTaskReadyGo,
                    request_deserializer=common__pb2.TaskReadyGoReq.FromString,
                    response_serializer=common__pb2.TaskReadyGoReply.SerializeToString,
            ),
            'HandleCancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleCancelTask,
                    request_deserializer=common__pb2.TaskCancelReq.FromString,
                    response_serializer=common__pb2.TaskCancelReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'computesvc.ComputeProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ComputeProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/computesvc.ComputeProvider/GetStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            compute__svc__pb2.GetStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/computesvc.ComputeProvider/GetTaskDetails',
            compute__svc__pb2.GetTaskDetailsReq.SerializeToString,
            compute__svc__pb2.GetTaskDetailsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadShard(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/computesvc.ComputeProvider/UploadShard',
            compute__svc__pb2.UploadShardReq.SerializeToString,
            compute__svc__pb2.UploadShardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleTaskReadyGo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/computesvc.ComputeProvider/HandleTaskReadyGo',
            common__pb2.TaskReadyGoReq.SerializeToString,
            common__pb2.TaskReadyGoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleCancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/computesvc.ComputeProvider/HandleCancelTask',
            common__pb2.TaskCancelReq.SerializeToString,
            common__pb2.TaskCancelReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
