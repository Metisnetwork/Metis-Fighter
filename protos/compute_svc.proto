syntax = "proto3";
package computesvc;
import "google/protobuf/empty.proto";

service ComputeProvider {
   rpc GetStatus(google.protobuf.Empty) returns (GetStatusReply) {
         option(google.api.http) = {
            get: "/compute/getStatus"
        };
  }
  rpc GetTaskDetails(GetTaskDetailsReq) returns (GetTaskDetailsReply) {
        option(google.api.http) = {
            post: "/compute/getTaskDetails"
            body: "*"
        };
  }

  rpc UploadShard(stream UploadShardReq) returns (UploadShardReply) {}
  rpc HandleTaskReadyGo(TaskReadyGoReq) returns (UploadShardReply) {
         option(google.api.http) = {
            post: "/compute/handleTaskReadyGo"
            body: "*"
        };
  }

}

message UploadShardReq {
  message Info {
    string task_id = 1;
    string data_id = 2;
  }
  oneof data {
    Info meta = 1;
    bytes content = 2;
  }
}

message UploadShardReply {
  bool ok = 1;
  string msg = 2;
}

message TaskReadyGoReq {
  string task_id = 1;
  string contract_id = 2;
  string data_id = 3;
  int32 party_id = 4;
  string env_id = 5;
  message Peer {
    string ip = 1;
    int32 port = 2;
    int32 party = 3;
    string name = 4;
  }
  repeated Peer peers = 6;
}

message GetStatusReply {
  string cpu = 1;
  string mem = 2;
  string bandwidth = 3;
}

message GetTaskDetailsReq {
  repeated string task_ids = 1;
}

message GetTaskDetailsReply {
  message Detail {
    string task_id = 1;
    string task_name = 2;
    string contract_id = 3;
    int64 elapsed_time = 4;
    int64 remain_time = 5;
    string progress = 6;
    string phase = 7;
  }
  repeated Detail task_details = 1;
}
